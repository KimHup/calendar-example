{"version":3,"sources":["DateRangePicker.js","nodes.js","DatePicker.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startDate","endDate","focusedInput","inherits","createClass","key","value","_this2","fetch","then","response","json","jsonData","setState","moment","JSON","parse","stringify","timePeriod","start","end","catch","error","console","_this3","react_default","a","createElement","className","react_dates","startDateId","endDateId","onDatesChange","_ref","onFocusChange","Component","toLocaleStringSupportsLocales","Date","toLocaleString","RangeError","DateRangeField","locales","options","record","_ref$showTime","showTime","source","rest","objectWithoutProperties","get","startValue","startDateString","toLocaleDateString","endValue","endDateString","Typography","assign","component","variant","inclusive","DateRangePicker_Calendar","label","NodeList","List","Datagrid","rowClick","nodes_DateRangeField","CalendarPicker","log","_ref2","DatePicker_this","Dashboard","Title","title","CardContent","DatePicker","DateRangePicker","App","Admin","dashboard","dataProvider","jsonServerProvider","Resource","name","list","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3477b00.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport moment from \"moment\";\r\nimport 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { DateRangePicker } from 'react-dates';\r\nimport get from \"lodash/get\";\r\n\r\n\r\n\r\nexport class Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startDate: null,\r\n            endDate: null,\r\n            focusedInput: null,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://my-json-server.typicode.com/msand/demo/nodes')\r\n            .then(response => response.json())\r\n            .then((jsonData) => {\r\n\r\n                this.setState({\r\n                    startDate: moment(JSON.parse(JSON.stringify(jsonData[0])).timePeriod.start.value),\r\n                    endDate: moment(JSON.parse(JSON.stringify(jsonData[0])).timePeriod.end.value)\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            });\r\n   }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"Calendar\">\r\n                <DateRangePicker\r\n                    startDateId=\"startDate\"\r\n                    endDateId=\"endDate\"\r\n                    startDate={this.props.startDate}\r\n                    endDate={this.props.endDate}\r\n                    onDatesChange={({ startDate, endDate }) => { this.setState({ startDate, endDate })}}\r\n                    focusedInput={this.state.focusedInput}\r\n                    onFocusChange={(focusedInput) => { this.setState({ focusedInput })}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar;","import React from 'react';\r\nimport get from 'lodash/get';\r\nimport {Datagrid, List, TextField} from 'react-admin';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Calendar} from \"./DateRangePicker\";\r\n\r\nconst toLocaleStringSupportsLocales = (() => {\r\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\r\n    try {\r\n        new Date().toLocaleString('i');\r\n    } catch (error) {\r\n        return error instanceof RangeError;\r\n    }\r\n    return false;\r\n})();\r\n\r\nexport const DateRangeField = ({\r\n       className,\r\n       locales,\r\n       options,\r\n       record,\r\n       showTime = false,\r\n       source,\r\n       ...rest\r\n    }) => {\r\n    if (!record) {\r\n        return null;\r\n    }\r\n    const value = get(record, source);\r\n    const hasValue = typeof value === 'object';\r\n    if (value == null || !hasValue) {\r\n        return null;\r\n    }\r\n    const startValue = value.start.value;\r\n    const startDate =\r\n        startValue instanceof Date ? startValue : new Date(startValue);\r\n    const startDateString = showTime\r\n        ? toLocaleStringSupportsLocales\r\n            ? startDate.toLocaleString(locales, options)\r\n            : startDate.toLocaleString()\r\n        : toLocaleStringSupportsLocales\r\n            ? startDate.toLocaleDateString(locales, options)\r\n            : startDate.toLocaleDateString();\r\n    const endValue = value.end.value;\r\n    const endDate = endValue instanceof Date ? endValue : new Date(endValue);\r\n    const endDateString = showTime\r\n        ? toLocaleStringSupportsLocales\r\n            ? endDate.toLocaleString(locales, options)\r\n            : endDate.toLocaleString()\r\n        : toLocaleStringSupportsLocales\r\n            ? endDate.toLocaleDateString(locales, options)\r\n            : endDate.toLocaleDateString();\r\n\r\n    return (\r\n        <Typography\r\n            component=\"span\"\r\n            variant=\"body1\"\r\n            className={className}\r\n            {...(rest)}\r\n        >\r\n            {startDateString} {value.start.inclusive ? 'inclusive' : 'exclusive'} to{' '}\r\n            {endDateString} {value.end.inclusive ? 'inclusive' : 'exclusive'}\r\n            <Calendar label=\"A Date\" start={startDate} end={endDate} />\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport const NodeList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"show\">\r\n            <DateRangeField source=\"timePeriod\" />\r\n        </Datagrid>\r\n    </List>\r\n);","import React from 'react';\r\nimport get from 'lodash/get';\r\nimport {Datagrid, List, TextField} from 'react-admin';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { DateRangePicker } from 'react-dates';\r\nimport Calendar from \"./DateRangePicker\";\r\n\r\nexport var CalendarPicker = ({\r\n       className,\r\n       locales,\r\n       options,\r\n       record,\r\n       showTime = false,\r\n       source,\r\n       ...rest\r\n   }) => {\r\n    if (!record) {\r\n        return null;\r\n    }\r\n    const value = get(record, source);\r\n    const hasValue = typeof value === 'object';\r\n    if (value == null || !hasValue) {\r\n        return null;\r\n    }\r\n    const startValue = value.start.value;\r\n    const startDate = startValue instanceof Date ? startValue : new Date(startValue);\r\n\r\n    const endValue = value.end.value;\r\n    const endDate = endValue instanceof Date ? endValue : new Date(endValue);\r\n    console.log(\"HHH\"+startDate+\"SAFASF\"+endDate);\r\n    return (\r\n            <DateRangePicker\r\n                startDateId=\"startDate2\"\r\n                endDateId=\"endDate2\"\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                onDatesChange={({ startDate, endDate }) => { this.setState({ startDate, endDate })}}\r\n                focusedInput={this.state.focusedInput}\r\n                onFocusChange={(focusedInput) => { this.setState({ focusedInput })}}\r\n            />\r\n    );\r\n};\r\n\r\nexport default CalendarPicker;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CalendarPicker from \"./DatePicker\";\r\nimport Calendar from \"./DateRangePicker\";\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport {Title} from 'react-admin';\r\n\r\nexport const Dashboard = () => (\r\n    <card>\r\n        <Title title=\"Date Picker\" />\r\n        <CardContent>\r\n            <CalendarPicker\r\n                source=\"timePeriod\" />\r\n            <Calendar label=\"A Date\" source=\"timePeriod\"/>\r\n        </CardContent>\r\n    </card>\r\n);\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport {NodeList} from './nodes'\r\nimport {Dashboard} from './Dashboard'\r\nimport jsonServerProvider from 'ra-data-json-server';\r\nimport {Admin, Resource, ListGuesser} from \"react-admin\";\r\nconst App = () => (\r\n    <Admin dashboard={Dashboard} dataProvider={jsonServerProvider('https://my-json-server.typicode.com/msand/demo')}>\r\n        <Resource  name=\"nodes\" list={NodeList}/>\r\n    </Admin>\r\n    );\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}