{"version":3,"sources":["DateRangeInput.js","DateRangeField.js","nodes.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["DateRangeInput","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","focusedInput","inherits","createClass","key","value","input","onChange","start","inclusive","end","_ref","startDate","endDate","setState","_this2","react_default","a","createElement","className","react_dates","startDateId","endDateId","moment","isOutsideRange","onDatesChange","_ref2","onFocusChange","small","appendToBody","Component","defaultProps","options","addField","toLocaleStringSupportsLocales","Date","toLocaleString","error","RangeError","EnhancedDateRangeField","pure","locales","record","_ref$showTime","showTime","source","rest","objectWithoutProperties","get","startValue","startDateString","toLocaleDateString","endValue","endDateString","Typography","assign","component","variant","addLabel","displayName","NodeList","List","Datagrid","rowClick","src_DateRangeField","NodeEdit","Edit","SimpleForm","Field","name","label","NodeCreate","Create","redirect","NodeShow","Show","SimpleShowLayout","Dashboard","Title","title","App","Admin","dashboard","dataProvider","jsonServerProvider","Resource","list","edit","show","create","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dbf7e27.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { addField, FieldTitle } from 'ra-core';\r\nimport moment from \"moment\";\r\nimport 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { DateRangePicker } from 'react-dates';\r\n\r\n/**\r\n * Convert Date object to String\r\n *\r\n * @param {Date} v value to convert\r\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\r\n */\r\nconst dateFormatter = v => {\r\n    if (!(v instanceof Date) || isNaN(v.getDate())) return;\r\n    const pad = '00';\r\n    const yyyy = v.getFullYear().toString();\r\n    const MM = (v.getMonth() + 1).toString();\r\n    const dd = v.getDate().toString();\r\n    return `${yyyy}-${(pad + MM).slice(-2)}-${(pad + dd).slice(-2)}`;\r\n};\r\n\r\nconst dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n\r\nconst sanitizeValue = value => {\r\n    // null, undefined and empty string values should not go through dateFormatter\r\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\r\n    if (value == null || value === '') {\r\n        return '';\r\n    }\r\n\r\n    if (value instanceof Date) {\r\n        return dateFormatter(value);\r\n    }\r\n\r\n    // valid dates should not be converted\r\n    if (dateRegex.test(value)) {\r\n        return value;\r\n    }\r\n\r\n    return dateFormatter(new Date(value));\r\n};\r\n\r\nexport class DateRangeInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            focusedInput: null,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.input.onChange({\r\n            start: {\r\n                value: this.props.input.value.start.value,\r\n                inclusive: true,\r\n            },\r\n            end: {\r\n                value: this.props.input.value.end.value,\r\n                inclusive: true },\r\n        });\r\n    }\r\n    onDatesChange({ startDate, endDate }) {\r\n        this.setState({ startDate, endDate });\r\n        this.props.input.onChange({\r\n            start: {\r\n                value: startDate,\r\n                inclusive: true,\r\n            },\r\n            end: {\r\n                value: endDate,\r\n                inclusive: true },\r\n        });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Calendar\">\r\n                <DateRangePicker\r\n                    startDateId=\"startDate\"\r\n                    endDateId=\"endDate\"\r\n                    startDate={moment(this.props.input.value.start.value)}\r\n                    endDate={moment(this.props.input.value.end.value)}\r\n                    isOutsideRange={() => false}\r\n                    onDatesChange={({ startDate, endDate }) => { this.onDatesChange({ startDate, endDate })}}\r\n                    focusedInput={this.state.focusedInput}\r\n                    onFocusChange={(focusedInput) => { this.setState({ focusedInput })}}\r\n                    small={true}\r\n                    appendToBody={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDateRangeInput.propTypes = {\r\n    classes: PropTypes.object,\r\n    className: PropTypes.string,\r\n    input: PropTypes.object,\r\n    isRequired: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    meta: PropTypes.object,\r\n    options: PropTypes.object,\r\n    resource: PropTypes.string,\r\n    source: PropTypes.string,\r\n};\r\n\r\nDateRangeInput.defaultProps = {\r\n    options: {},\r\n};\r\n\r\nexport default addField(DateRangeInput);","import React from 'react';\r\nimport get from 'lodash/get';\r\nimport pure from 'recompose/pure';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst toLocaleStringSupportsLocales = (() => {\r\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\r\n    try {\r\n        new Date().toLocaleString('i');\r\n    } catch (error) {\r\n        return error instanceof RangeError;\r\n    }\r\n    return false;\r\n})();\r\n\r\nexport const DateRangeField = ({\r\n                                   className,\r\n                                   locales,\r\n                                   options,\r\n                                   record,\r\n                                   showTime = false,\r\n                                   source,\r\n                                   ...rest\r\n                               }) => {\r\n    if (!record) {\r\n        return null;\r\n    }\r\n    const value = get(record, source);\r\n    const hasValue = typeof value === 'object';\r\n    if (value == null || !hasValue) {\r\n        return null;\r\n    }\r\n    const startValue = value.start.value;\r\n    const startDate =\r\n        startValue instanceof Date ? startValue : new Date(startValue);\r\n    const startDateString = showTime\r\n        ? toLocaleStringSupportsLocales\r\n            ? startDate.toLocaleString(locales, options)\r\n            : startDate.toLocaleString()\r\n        : toLocaleStringSupportsLocales\r\n            ? startDate.toLocaleDateString(locales, options)\r\n            : startDate.toLocaleDateString();\r\n    const endValue = value.end.value;\r\n    const endDate = endValue instanceof Date ? endValue : new Date(endValue);\r\n    const endDateString = showTime\r\n        ? toLocaleStringSupportsLocales\r\n            ? endDate.toLocaleString(locales, options)\r\n            : endDate.toLocaleString()\r\n        : toLocaleStringSupportsLocales\r\n            ? endDate.toLocaleDateString(locales, options)\r\n            : endDate.toLocaleDateString();\r\n\r\n    return (\r\n        <Typography\r\n            component=\"span\"\r\n            variant=\"body1\"\r\n            className={className}\r\n            {...(rest)}\r\n        >\r\n            {startDateString} {value.start.inclusive ? 'inclusive' : 'exclusive'} to{' '}\r\n            {endDateString} {value.end.inclusive ? 'inclusive' : 'exclusive'}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nconst EnhancedDateRangeField = pure(DateRangeField);\r\n\r\nEnhancedDateRangeField.defaultProps = {\r\n    addLabel: true,\r\n};\r\n\r\nEnhancedDateRangeField.displayName = 'EnhancedDateRangeField';\r\n\r\nexport default EnhancedDateRangeField;","import React from 'react';\r\nimport {\r\n    Create,\r\n    Datagrid,\r\n    Edit,\r\n    List,\r\n    Show,\r\n    SimpleForm,\r\n    SimpleShowLayout,\r\n} from 'react-admin';\r\nimport { Field } from 'redux-form';\r\nimport DateRangeInput from './DateRangeInput';\r\nimport DateRangeField from './DateRangeField';\r\n\r\nexport const NodeList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"show\">\r\n            <DateRangeField source=\"timePeriod\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport const NodeEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <Field name=\"timePeriod\" component={DateRangeInput} label=\"Time Period\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\nexport const NodeCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm redirect=\"show\">\r\n            <Field name=\"timePeriod\" component={DateRangeInput} label=\"Time Period\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\nexport const NodeShow = props => (\r\n    <Show {...props}>\r\n        <SimpleShowLayout>\r\n            <DateRangeField source=\"timePeriod\" />\r\n        </SimpleShowLayout>\r\n    </Show>\r\n);","import React from 'react';\r\nimport './App.css';\r\nimport {Title} from 'react-admin';\r\n\r\nexport const Dashboard = (props) => (\r\n    <div>\r\n        <Title title=\"Dashboard\" />\r\n        <div> Empty</div>\r\n    </div>\r\n);\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport {NodeList, NodeCreate, NodeEdit, NodeShow} from './nodes'\r\nimport {Dashboard} from './Dashboard'\r\nimport jsonServerProvider from 'ra-data-json-server';\r\nimport {Admin, Resource, ListGuesser} from \"react-admin\";\r\nconst App = () => (\r\n    <Admin dashboard={Dashboard} dataProvider={jsonServerProvider('https://my-json-server.typicode.com/msand/demo')}>\r\n        <Resource\r\n            name=\"nodes\"\r\n            list={NodeList}\r\n            edit={NodeEdit}\r\n            show={NodeShow}\r\n            create={NodeCreate}\r\n        />\r\n    </Admin>\r\n    );\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}