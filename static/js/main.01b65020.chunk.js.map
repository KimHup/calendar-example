{"version":3,"sources":["DateRangePicker.js","nodes.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startDate","endDate","focusedInput","inherits","createClass","key","value","_this2","fetch","then","response","json","jsonData","setState","moment","JSON","parse","stringify","timePeriod","start","end","catch","error","console","_this3","log","source","react_default","a","createElement","className","react_dates","startDateId","endDateId","onDatesChange","_ref","onFocusChange","small","appendToBody","Component","toLocaleStringSupportsLocales","Date","toLocaleString","RangeError","DateRangeField","locales","options","record","_ref$showTime","showTime","objectWithoutProperties","get","startValue","startDateString","toLocaleDateString","endValue","endDateString","inclusive","DateRangePicker_Calendar","label","NodeList","List","Datagrid","rowClick","nodes_DateRangeField","App","Admin","dataProvider","jsonServerProvider","Resource","name","list","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01b65020.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport moment from \"moment\";\r\nimport 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport { DateRangePicker } from 'react-dates';\r\nimport get from \"lodash/get\";\r\n\r\n\r\n\r\nexport class Calendar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startDate: null,\r\n            endDate: null,\r\n            focusedInput: null,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://my-json-server.typicode.com/msand/demo/nodes')\r\n            .then(response => response.json())\r\n            .then((jsonData) => {\r\n\r\n                this.setState({\r\n                    startDate: moment(JSON.parse(JSON.stringify(jsonData[0])).timePeriod.start.value),\r\n                    endDate: moment(JSON.parse(JSON.stringify(jsonData[0])).timePeriod.end.value)\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            });\r\n   }\r\n\r\n    render() {\r\n        console.log(this.props.source)\r\n        return (\r\n\r\n            <div className=\"Calendar\">\r\n                <DateRangePicker\r\n                    startDateId=\"startDate\"\r\n                    endDateId=\"endDate\"\r\n                    startDate={this.props.startDate}\r\n                    endDate={this.props.endDate}\r\n                    onDatesChange={({ startDate, endDate }) => { this.setState({ startDate, endDate })}}\r\n                    focusedInput={this.state.focusedInput}\r\n                    onFocusChange={(focusedInput) => { this.setState({ focusedInput })}}\r\n                    small={true}\r\n                    appendToBody={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar;","import React from 'react';\r\nimport get from 'lodash/get';\r\nimport {Datagrid, List, TextField} from 'react-admin';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Calendar} from \"./DateRangePicker\";\r\n\r\nconst toLocaleStringSupportsLocales = (() => {\r\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\r\n    try {\r\n        new Date().toLocaleString('i');\r\n    } catch (error) {\r\n        return error instanceof RangeError;\r\n    }\r\n    return false;\r\n})();\r\n\r\nexport const DateRangeField = ({\r\n       className,\r\n       locales,\r\n       options,\r\n       record,\r\n       showTime = false,\r\n       source,\r\n       ...rest\r\n    }) => {\r\n    if (!record) {\r\n        return null;\r\n    }\r\n    const value = get(record, source);\r\n    const hasValue = typeof value === 'object';\r\n    if (value == null || !hasValue) {\r\n        return null;\r\n    }\r\n    const startValue = value.start.value;\r\n    const startDate =\r\n        startValue instanceof Date ? startValue : new Date(startValue);\r\n    const startDateString = showTime\r\n        ? toLocaleStringSupportsLocales\r\n            ? startDate.toLocaleString(locales, options)\r\n            : startDate.toLocaleString()\r\n        : toLocaleStringSupportsLocales\r\n            ? startDate.toLocaleDateString(locales, options)\r\n            : startDate.toLocaleDateString();\r\n    const endValue = value.end.value;\r\n    const endDate = endValue instanceof Date ? endValue : new Date(endValue);\r\n    const endDateString = showTime\r\n        ? toLocaleStringSupportsLocales\r\n            ? endDate.toLocaleString(locales, options)\r\n            : endDate.toLocaleString()\r\n        : toLocaleStringSupportsLocales\r\n            ? endDate.toLocaleDateString(locales, options)\r\n            : endDate.toLocaleDateString();\r\n\r\n    return (\r\n        <div>\r\n            {startDateString} {value.start.inclusive ? 'inclusive' : 'exclusive'} to{' '}\r\n            {endDateString} {value.end.inclusive ? 'inclusive' : 'exclusive'}\r\n            <Calendar label=\"A Date\" start={startDate} end={endDate} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const NodeList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"show\">\r\n            <DateRangeField source=\"timePeriod\" />\r\n        </Datagrid>\r\n    </List>\r\n);","import React from 'react';\r\nimport {NodeList} from './nodes'\r\nimport {Dashboard} from './Dashboard'\r\nimport jsonServerProvider from 'ra-data-json-server';\r\nimport {Admin, Resource, ListGuesser} from \"react-admin\";\r\nconst App = () => (\r\n    <Admin  dataProvider={jsonServerProvider('https://my-json-server.typicode.com/msand/demo')}>\r\n        <Resource  name=\"nodes\" list={NodeList}/>\r\n    </Admin>\r\n    );\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}